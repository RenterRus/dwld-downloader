// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: docs/proto/v1/download.proto

// Имя пакета

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Downloader_SetToQueue_FullMethodName      = "/grpc.v1.Downloader/SetToQueue"
	Downloader_DeleteFromQueue_FullMethodName = "/grpc.v1.Downloader/DeleteFromQueue"
	Downloader_CleanHistory_FullMethodName    = "/grpc.v1.Downloader/CleanHistory"
	Downloader_Status_FullMethodName          = "/grpc.v1.Downloader/Status"
	Downloader_Queue_FullMethodName           = "/grpc.v1.Downloader/Queue"
	Downloader_Healtheck_FullMethodName       = "/grpc.v1.Downloader/Healtheck"
)

// DownloaderClient is the client API for Downloader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloaderClient interface {
	SetToQueue(ctx context.Context, in *SetToQueueRequest, opts ...grpc.CallOption) (*SetToQueueResponse, error)
	DeleteFromQueue(ctx context.Context, in *DeleteFromQueueRequest, opts ...grpc.CallOption) (*DeleteFromQueueResponse, error)
	CleanHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CleanHistoryResponse, error)
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	Queue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HistoryResponse, error)
	Healtheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealtheckResponse, error)
}

type downloaderClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloaderClient(cc grpc.ClientConnInterface) DownloaderClient {
	return &downloaderClient{cc}
}

func (c *downloaderClient) SetToQueue(ctx context.Context, in *SetToQueueRequest, opts ...grpc.CallOption) (*SetToQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetToQueueResponse)
	err := c.cc.Invoke(ctx, Downloader_SetToQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloaderClient) DeleteFromQueue(ctx context.Context, in *DeleteFromQueueRequest, opts ...grpc.CallOption) (*DeleteFromQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFromQueueResponse)
	err := c.cc.Invoke(ctx, Downloader_DeleteFromQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloaderClient) CleanHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CleanHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanHistoryResponse)
	err := c.cc.Invoke(ctx, Downloader_CleanHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloaderClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Downloader_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloaderClient) Queue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, Downloader_Queue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloaderClient) Healtheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealtheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealtheckResponse)
	err := c.cc.Invoke(ctx, Downloader_Healtheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloaderServer is the server API for Downloader service.
// All implementations must embed UnimplementedDownloaderServer
// for forward compatibility.
type DownloaderServer interface {
	SetToQueue(context.Context, *SetToQueueRequest) (*SetToQueueResponse, error)
	DeleteFromQueue(context.Context, *DeleteFromQueueRequest) (*DeleteFromQueueResponse, error)
	CleanHistory(context.Context, *emptypb.Empty) (*CleanHistoryResponse, error)
	Status(context.Context, *emptypb.Empty) (*StatusResponse, error)
	Queue(context.Context, *emptypb.Empty) (*HistoryResponse, error)
	Healtheck(context.Context, *emptypb.Empty) (*HealtheckResponse, error)
	mustEmbedUnimplementedDownloaderServer()
}

// UnimplementedDownloaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDownloaderServer struct{}

func (UnimplementedDownloaderServer) SetToQueue(context.Context, *SetToQueueRequest) (*SetToQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToQueue not implemented")
}
func (UnimplementedDownloaderServer) DeleteFromQueue(context.Context, *DeleteFromQueueRequest) (*DeleteFromQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromQueue not implemented")
}
func (UnimplementedDownloaderServer) CleanHistory(context.Context, *emptypb.Empty) (*CleanHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanHistory not implemented")
}
func (UnimplementedDownloaderServer) Status(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDownloaderServer) Queue(context.Context, *emptypb.Empty) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (UnimplementedDownloaderServer) Healtheck(context.Context, *emptypb.Empty) (*HealtheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healtheck not implemented")
}
func (UnimplementedDownloaderServer) mustEmbedUnimplementedDownloaderServer() {}
func (UnimplementedDownloaderServer) testEmbeddedByValue()                    {}

// UnsafeDownloaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloaderServer will
// result in compilation errors.
type UnsafeDownloaderServer interface {
	mustEmbedUnimplementedDownloaderServer()
}

func RegisterDownloaderServer(s grpc.ServiceRegistrar, srv DownloaderServer) {
	// If the following call pancis, it indicates UnimplementedDownloaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Downloader_ServiceDesc, srv)
}

func _Downloader_SetToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetToQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloaderServer).SetToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downloader_SetToQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloaderServer).SetToQueue(ctx, req.(*SetToQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downloader_DeleteFromQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloaderServer).DeleteFromQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downloader_DeleteFromQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloaderServer).DeleteFromQueue(ctx, req.(*DeleteFromQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downloader_CleanHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloaderServer).CleanHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downloader_CleanHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloaderServer).CleanHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downloader_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloaderServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downloader_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloaderServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downloader_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloaderServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downloader_Queue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloaderServer).Queue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downloader_Healtheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloaderServer).Healtheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downloader_Healtheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloaderServer).Healtheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Downloader_ServiceDesc is the grpc.ServiceDesc for Downloader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Downloader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.v1.Downloader",
	HandlerType: (*DownloaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetToQueue",
			Handler:    _Downloader_SetToQueue_Handler,
		},
		{
			MethodName: "DeleteFromQueue",
			Handler:    _Downloader_DeleteFromQueue_Handler,
		},
		{
			MethodName: "CleanHistory",
			Handler:    _Downloader_CleanHistory_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Downloader_Status_Handler,
		},
		{
			MethodName: "Queue",
			Handler:    _Downloader_Queue_Handler,
		},
		{
			MethodName: "Healtheck",
			Handler:    _Downloader_Healtheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs/proto/v1/download.proto",
}
